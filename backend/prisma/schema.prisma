// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  CUSTOMER
  AGENT
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  MOBILE_MONEY
  BANK_TRANSFER
}

enum TourType {
  ADVENTURE
  CULTURAL
  BEACH
  CITY
  WILDLIFE
  CRUISE
}

enum TourStatus {
  UPCOMING
  ONGOING
  COMPLETED
  CANCELLED
}

model User {
  id             Int      @id @default(autoincrement())
  name           String
  email          String   @unique
  password       String
  role           Role     @default(CUSTOMER)
  phone          String?  @unique
  address        String?
  profilePicture String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  bookings     Booking[]
  payments     Payment[]
  reviews      Review[]
  inquiries    Inquiry[]
  Wishlist     Wishlist[]
  Notification Notification[]
}

model Tour {
  id          Int        @id @default(autoincrement())
  name        String
  description String?
  type        TourType
  status      TourStatus @default(UPCOMING)
  duration    Int // Duration in days
  price       Float
  maxGuests   Int
  startDate   DateTime
  endDate     DateTime
  location    String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  itinerary    Itinerary[]
  bookings     Booking[]
  reviews      Review[]
  inclusions   TourInclusion[]
  exclusions   TourExclusion[]
  destinations Destination[]
  Wishlist     Wishlist[]

  @@index([name], name: "tour_name_idx")
  @@index([startDate, endDate], name: "tour_start_end_idx")
  @@index([type, status], name: "tour_type_status_idx")
  @@index([location], name: "tour_location_idx")
}

model Destination {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  country     String
  city        String?
  photo       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tours              Tour[]
  hotels             Hotel[]
  originFlights      Flight[] @relation("FlightOrigin")
  destinationFlights Flight[] @relation("FlightDestination")

  @@index([name], name: "destination_name_idx")
  @@index([country, city], name: "destination_country_city_idx")
}

model Itinerary {
  id          Int      @id @default(autoincrement())
  tour        Tour     @relation(fields: [tourId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tourId      Int
  day         Int
  title       String
  description String?
  activities  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model TourInclusion {
  id          Int      @id @default(autoincrement())
  tour        Tour     @relation(fields: [tourId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tourId      Int
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model TourExclusion {
  id          Int      @id @default(autoincrement())
  tour        Tour     @relation(fields: [tourId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tourId      Int
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Hotel {
  id            Int         @id @default(autoincrement())
  name          String
  description   String?
  address       String
  city          String
  country       String
  phone         String?
  photo         String?
  starRating    Int         @default(3)
  amenities     String[] // Array of amenities (e.g., ["WiFi", "Pool", "Gym"])
  destination   Destination @relation(fields: [destinationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  destinationId Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  rooms    Room[]
  bookings Booking[]

  @@index([name], name: "hotel_name_idx")
  @@index([destinationId], name: "hotel_destination_idx")
  @@index([starRating], name: "hotel_star_rating_idx")
  @@index([address], name: "hotel_address_idx")
}

model Room {
  id          Int      @id @default(autoincrement())
  hotel       Hotel    @relation(fields: [hotelId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  hotelId     Int
  roomType    String // e.g., "Single", "Double", "Suite"
  price       Float
  capacity    Int
  photo       String?
  description String?
  amenities   String[] // Array of amenities (e.g., ["WiFi", "AC", "TV"])
  available   Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  bookings Booking[]

  @@index([hotelId, roomType], name: "room_hotel_type_idx")
  @@index([available], name: "room_available_idx")
  @@index([price], name: "room_price_idx")
  @@index([capacity], name: "room_capacity_idx")
}

model Flight {
  id             Int         @id @default(autoincrement())
  flightNumber   String      @unique
  airline        String
  departure      DateTime
  arrival        DateTime
  origin         Destination @relation("FlightOrigin", fields: [originId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  originId       Int
  destination    Destination @relation("FlightDestination", fields: [destinationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  destinationId  Int
  price          Float
  photo          String?
  flightClass    String // e.g., "Economy", "Business", "First"
  duration       Int // Duration in minutes
  stops          Int         @default(0) // Number of stops (0 for direct flights)
  seatsAvailable Int
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  bookings Booking[]

  @@index([originId, destinationId], name: "flight_origin_destination_idx")
  @@index([departure, arrival], name: "flight_departure_arrival_idx")
  @@index([flightNumber], name: "flight_number_idx")
  @@index([airline], name: "flight_airline_idx")
  @@index([price], name: "flight_price_idx")
}

model Booking {
  id          Int           @id @default(autoincrement())
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId      Int
  tour        Tour?         @relation(fields: [tourId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tourId      Int?
  hotel       Hotel?        @relation(fields: [hotelId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  hotelId     Int?
  room        Room?         @relation(fields: [roomId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  roomId      Int?
  flight      Flight?       @relation(fields: [flightId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  flightId    Int?
  status      BookingStatus @default(PENDING)
  totalPrice  Float
  bookingDate DateTime      @default(now())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  payment Payment?

  @@index([userId, tourId, hotelId, roomId, flightId], name: "booking_user_tour_hotel_room_flight_idx")
}

model Payment {
  id                   Int           @id @default(autoincrement())
  booking              Booking       @relation(fields: [bookingId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  bookingId            Int           @unique
  user                 User          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId               Int
  amount               Float
  currency             String        @default("GHS")
  status               PaymentStatus @default(PENDING)
  paymentDate          DateTime? // Make nullable since it's set after payment completion
  paymentMethod        PaymentMethod
  transactionReference String?       @unique // Changed from transactionId
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt

  @@index([userId], name: "payment_user_idx")
  @@index([transactionReference], name: "payment_transaction_ref_idx")
}

model Review {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    Int
  tour      Tour     @relation(fields: [tourId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tourId    Int
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, tourId])
}

enum InquiryStatus {
  PENDING
  RESOLVED
}

model Inquiry {
  id        Int           @id @default(autoincrement())
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    Int
  subject   String
  message   String
  status    InquiryStatus @default(PENDING)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model PromoCode {
  id        Int      @id @default(autoincrement())
  code      String   @unique
  discount  Float // e.g., 0.15 for 15%
  validFrom DateTime
  validTo   DateTime
  maxUsage  Int
  usedCount Int      @default(0)
  createdAt DateTime @default(now())
}

model Wishlist {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  tour      Tour     @relation(fields: [tourId], references: [id])
  tourId    Int
  createdAt DateTime @default(now())
}

model Notification {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
